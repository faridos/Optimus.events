<?php/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of PaymentController * * @author web2arts */ namespace FrontOffice\PaymentBundle\Controller;use Payum\Core\Request\GetHumanStatus;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\JsonResponse;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Symfony\Component\Validator\Constraints\Range;class PaymentController extends Controller {        /**     *  @Route(     *   "/prepare_simple_purchase_doctrine_orm",     *   name="front_office_paypal_express_checkout_prepare_simple_purchase_doctrine_orm"     * )     *      * @Template("SimataiPaymentBundle:Purchase:prepare.html.twig")     */    public function prepareSimplePurchaseAndDoctrineOrmAction(Request $request)    {        $paymentName = 'paypal_express_checkout_and_doctrine_orm';                $form = $this->createPurchaseForm();        $form->handleRequest($request);        if ($form->isValid()) {            $data = $form->getData();            $storage = $this->getPayum()->getStorage('FrontOffice\PaymentBundle\Entity\PaymentDetails');            /** @var $paymentDetails PaymentDetails */            $paymentDetails = $storage->createModel();            $paymentDetails['PAYMENTREQUEST_0_CURRENCYCODE'] = $data['currency'];            $paymentDetails['PAYMENTREQUEST_0_AMT'] = $data['amount'];            $storage->updateModel($paymentDetails);            $captureToken = $this->getTokenFactory()->createCaptureToken(                $paymentName,                $paymentDetails,                'front_office_payment_details_view'            );            $paymentDetails['RETURNURL'] = $captureToken->getTargetUrl();            $paymentDetails['CANCELURL'] = $captureToken->getTargetUrl();            $paymentDetails['INVNUM'] = $paymentDetails->getId();            $storage->updateModel($paymentDetails);            return $this->redirect($captureToken->getTargetUrl());        }        return array(            'form' => $form->createView(),            'paymentName' => $paymentName        );    }      /**     * @return \Symfony\Component\Form\Form     */    protected function createPurchaseForm()    {        return $this->createFormBuilder()            ->add('amount', null, array(                'data' => 1                         ))            ->add('currency', null, array('data' => 'EUR'))            ->getForm()        ;    }    /**     * @return RegistryInterface     */    protected function getPayum()    {        return $this->get('payum');    }    /**     * @return GenericTokenFactoryInterface     */    protected function getTokenFactory()    {        return $this->get('payum.security.token_factory');    }    }