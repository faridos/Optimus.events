<?php

namespace FrontOffice\OptimusBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository {
    
   
    
//     public function getEventJour($id)
//    {
//        $dt = new \Datetime();
//        $dt2 = new \DateTime();
//        $dt2 = $dt2->modify('- 1 days');
//        $query = $this->createQueryBuilder('e')
//            ->select('e')
//            ->where("e.dateDebut BETWEEN  '" . $dt2->format("Y-m-d") . " 00:00:00' and '" . $dt->format("Y-m-d") . " 23:59:59'")
//            ->andWhere("e.id");
//        return $query->getQuery()->getResult();
//    }

    public function getEventJour() {

        $em = $this->getEntityManager();
        $dt = new \Datetime();
        $dt = $dt->modify('+ 1 days');
        $dt2 = new \DateTime();
        $dt2 = $dt2->modify('+ 2 days');
        $query = $em->createQuery("SELECT event "
                        . "FROM FrontOfficeOptimusBundle:Event event"
                        . " where event.active = 1 and event.dateDebut BETWEEN  '" . $dt->format("Y-m-d") . " 00:00:00' and '" . $dt2->format("Y-m-d") . " 23:59:59'"
                );

        return $events = $query->getResult();
    }
    
    
    public function getEventLoad($date, $lng, $lat) {

        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT event, u "
                        . "FROM FrontOfficeOptimusBundle:Event event LEFT JOIN event.createur u"
                        . " where event.active = 1 and event.dateFin > :date and event.lng BETWEEN :lng-0.1 AND :lng+0.1 and event.lat BETWEEN :lat-0.1 AND :lat+0.1"
                        . " ORDER BY event.dateDebut DESC "
                )->setParameter('date', $date)
                ->setParameter('lng', $lng)
                ->setParameter('lat', $lat);

        return $events = $query->getResult();
    }
    
    public function getEventsMap() {

        $em = $this->getEntityManager();
        $dt = new \Datetime();
        $query = $em->createQuery("SELECT event, u "
                        . "FROM FrontOfficeOptimusBundle:Event event LEFT JOIN event.createur u"
                        . " where event.active = 1 and event.dateFin > '" . $dt->format("Y-m-d") ."'"
                );

        return $events = $query->getResult();
    }
    
    public function getParticipants($event) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $particip = $qb->select('p')
                        ->from("FrontOfficeOptimusBundle:Participation", 'p')
                        ->where("p.event = :event")
                        ->setParameter('event', $event)
                        ->getQuery()->getResult();

        $participants = array();

        foreach ($particip as $p) {
            $participants[] = $p->getParticipant();
        }
        return $participants;
    }
    public function getParticipants2($event, $id_createur) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $particip = $qb->select('p')
                        ->from("FrontOfficeOptimusBundle:Participation", 'p')
                        ->where("p.event = :event")
                        ->andWhere('p.participant <> :id_createur')
                        ->setParameter('event', $event)
                        ->setParameter('id_createur', $id_createur)
                        ->getQuery()->getResult();

        $participants = array();

        foreach ($particip as $p) {
            $participants[] = $p->getParticipant();
        }
        return $participants;
    }
    
    public function ParticipantOuNon($event, $user) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $participant = $qb->select('p')
                        ->from("FrontOfficeOptimusBundle:Participation", 'p')
                        ->where("p.event = :event")
                        ->andWhere("p.participant= :user")
                        ->setParameters(array('event' => $event, 'user' => $user))
                        ->getQuery()->getResult();

        return count($participant); // retourne 0 ou 1
    }

    
//    public function getEventLoadAjax($date, $lng, $lat, $last_id) {
//
//        $em = $this->getEntityManager();
//        $query = $em->createQuery("SELECT event, u "
//                        . "FROM FrontOfficeOptimusBundle:Event event LEFT JOIN event.createur u"
//                        . " where event.active = 1 and event.dateFin > :date and event.lng BETWEEN :lng-0.1 AND :lng+0.1 and event.lat BETWEEN :lat-0.1 AND :lat+0.1"
//                        . " ORDER BY event.dateDebut DESC "
//                )->setParameter('date', $date)
//                ->setParameter('lng', $lng)
//                ->setParameter('lat', $lat)
//                ->setMaxResults(1)
//                ->setFirstResult($last_id);
//
//        return $events = $query->getArrayResult();
//    }
     
    
    public function getEvents($titre, $type, $lieu, $date) {
        $em = $this->getEntityManager();
        $events=Null;
        $condition = "WHERE 1=1";
        $condition = $condition . " AND e.active='1' ";
        $parameters = array();

        if ($type != null) {
            $condition = $condition . " AND UPPER(e.type) LIKE :type";
            $parameters[':type'] = "%". strtoupper($type) . "%";
        }

        if ($lieu != null) {
            $condition = $condition . " AND UPPER(e.lieu) LIKE :lieu";
            $parameters[':lieu'] = "%". strtoupper($lieu) . "%";
        }

        //par date
        if ($date == 'aujourdhui') {
            $condition = $condition . " AND ( e.dateDebut BETWEEN :deb AND :fin )";
            $parameters[':deb'] = date("Y-m-d 00:00:00");
            $parameters[':fin'] = date("Y-m-d 23:59:59");
        } elseif ($date == 'semaine') {
            $today = date('Y-m-d H:i:s');
            $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
            $parameters[':now'] = $today;
            $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 week', strtotime($today)));
        } elseif ($date == 'mois') {
            $today = date('Y-m-d H:i:s');
            $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
            $parameters[':now'] = $today;
            $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 month', strtotime($today)));
        } elseif ($date == 'an') {
            $today = date('Y-m-d H:i:s');
            $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
            $parameters[':now'] = $today;
            $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 year', strtotime($today)));
        }

        if ($titre != null) {
        $condition = $condition . " AND UPPER(e.titre) LIKE :titre";
        $parameters[':titre'] = "%". strtoupper($titre) . "%";
        }

        if($type || $lieu || $date || $titre != Null){
        $events = $em->createQuery("SELECT e FROM FrontOfficeOptimusBundle:Event e " . $condition)
                        ->setParameters($parameters)->getResult();
        }
        return $events;
    }
    
    public function getEventsCreateurAm($createur, $titre, $type, $lieu, $date , $usercrt) {
        $em = $this->getEntityManager();
        $friends = $em->getRepository("FrontOfficeUserBundle:User")->getFrinds($usercrt->getId());
        $res = null;

        foreach ($friends as $friend) {
            $condition = "WHERE 1=1";
            $condition = $condition . " AND e.active='1' ";
            $parameters = array();



            if ($friend != null) {
                $condition = $condition . " AND e.createur in (:friend)";
                $parameters[':friend'] = $friend;
            }

            if ($type != null) {
                $condition = $condition . " AND UPPER(e.type) LIKE :type";
                $parameters[':type'] = "%". strtoupper($type) . "%";
            }

            if ($lieu != null) {
                $condition = $condition . " AND UPPER(e.lieu) LIKE :lieu";
                $parameters[':lieu'] = "%". strtoupper($lieu) . "%";
            }

            //par date
            if ($date == 'aujourdhui') {
                $condition = $condition . " AND ( e.dateDebut BETWEEN :deb AND :fin )";
                $parameters[':deb'] = date("Y-m-d 00:00:00");
                $parameters[':fin'] = date("Y-m-d 23:59:59");
            } elseif ($date == 'semaine') {
                $today = date('Y-m-d H:i:s');
                $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
                $parameters[':now'] = $today;
                $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 week', strtotime($today)));
            } elseif ($date == 'mois') {
                $today = date('Y-m-d H:i:s');
                $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
                $parameters[':now'] = $today;
                $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 month', strtotime($today)));
            } elseif ($date == 'an') {
                $today = date('Y-m-d H:i:s');
                $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
                $parameters[':now'] = $today;
                $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 year', strtotime($today)));
            }


            $condition = $condition . " AND UPPER(e.titre) LIKE :titre";
            $parameters[':titre'] = "%". strtoupper($titre) . "%";



            $res[] = $em->createQuery("SELECT e FROM FrontOfficeOptimusBundle:Event e " . $condition)
                            ->setParameters($parameters)->getResult();
        }
        return $res;
    }
    
    public function getEventsCreateur($createur, $titre, $type, $lieu, $date) {
        $em = $this->getEntityManager();
        $users = $em->getRepository("FrontOfficeUserBundle:User")->getUsersByName($createur);


        $res = null;

        foreach ($users as $user) {
            $condition = "WHERE 1=1";
            $condition = $condition . " AND e.active='1' ";
            $parameters = array();



            if ($user != null) {
                $condition = $condition . " AND e.createur = :createur";
                $parameters[':createur'] = $user->getId();
            }

            if ($type != null) {
                $condition = $condition . " AND UPPER(e.type) LIKE :type";
                $parameters[':type'] = "%". strtoupper($type) . "%";
            }

            if ($lieu != null) {
                $condition = $condition . " AND UPPER(e.lieu) LIKE :lieu";
                $parameters[':lieu'] = "%". strtoupper($lieu) . "%";
            }

            //par date
            if ($date == 'aujourdhui') {
                $condition = $condition . " AND ( e.dateDebut BETWEEN :deb AND :fin )";
                $parameters[':deb'] = date("Y-m-d 00:00:00");
                $parameters[':fin'] = date("Y-m-d 23:59:59");
            } elseif ($date == 'semaine') {
                $today = date('Y-m-d H:i:s');
                $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
                $parameters[':now'] = $today;
                $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 week', strtotime($today)));
            } elseif ($date == 'mois') {
                $today = date('Y-m-d H:i:s');
                $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
                $parameters[':now'] = $today;
                $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 month', strtotime($today)));
            } elseif ($date == 'an') {
                $today = date('Y-m-d H:i:s');
                $condition = $condition . " AND ( e.dateDebut BETWEEN :dernier_semaine AND :now )";
                $parameters[':now'] = $today;
                $parameters[':dernier_semaine'] = date('Y-m-d H:i:s', strtotime('-1 year', strtotime($today)));
            }


            $condition = $condition . " AND UPPER(e.titre) LIKE :titre";
            $parameters[':titre'] = "%". strtoupper($titre) . "%";



            $res[] = $em->createQuery("SELECT e FROM FrontOfficeOptimusBundle:Event e " . $condition)
                            ->setParameters($parameters)->getResult();
        }
        return $res;
    }
    
    public function getEventsSearch($titre) {
      $qb=$this->getEntityManager()->createQueryBuilder();
      $events=$qb->select('e')
                     ->from("FrontOfficeOptimusBundle:Event", 'e')
                     ->where("e.active = 1")
                     ->andWhere("UPPER(e.titre) LIKE :key")
                     ->setParameter('key', '%'.strtoupper($titre).'%')
                     ->getQuery()->getResult();
     return $events;
    }
}
