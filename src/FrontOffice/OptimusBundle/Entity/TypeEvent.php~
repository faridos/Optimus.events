<?php

namespace FrontOffice\OptimusBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * TypeEvent
 *
 * @ORM\Table("type_event")
 * @ORM\Entity(repositoryClass="FrontOffice\OptimusBundle\Repository\TypeEventRepository")
 */
class TypeEvent
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="nom", type="string", length=100)
     */
    private $nom;
     /**
    * @ORM\OneToMany(targetEntity="Event", mappedBy="type")
    **/
    protected $evenement;


    /**
     * Get id
     *
     * @return integer 
     */
    
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set nom
     *
     * @param string $nom
     * @return TypeEvent
     */
    public function setNom($nom)
    {
        $this->nom = $nom;

        return $this;
    }

    /**
     * Get nom
     *
     * @return string 
     */
    public function getNom()
    {
        return $this->nom;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->evenement = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Add evenement
     *
     * @param \FrontOffice\OptimusBundle\Entity\Event $evenement
     * @return TypeEvent
     */
    public function addEvenement(\FrontOffice\OptimusBundle\Entity\Event $evenement)
    {
        $this->evenement[] = $evenement;
    
        return $this;
    }

    /**
     * Remove evenement
     *
     * @param \FrontOffice\OptimusBundle\Entity\Event $evenement
     */
    public function removeEvenement(\FrontOffice\OptimusBundle\Entity\Event $evenement)
    {
        $this->evenement->removeElement($evenement);
    }

    /**
     * Get evenement
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getEvenement()
    {
        return $this->evenement;
    }
}