<?php

namespace FrontOffice\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository {

    public function getFrinds($id) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('u');
        $qb->select('u')
                ->from('FrontOffice\UserBundle\Entity\User', 'u')
                ->Join('Sly\RelationBundle\Entity\Relation', 'r')
                ->where('r.object2Id = u.id and r.object1Id = :id')
                ->orWhere('r.object1Id = u.id and r.object2Id = :id')
                ->andWhere('r.confirmed = 1')
                ->setParameter('id', $id);
        return $qb->getQuery()->getResult();
    }

    public function getIsAmis($id,$ida) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('r');
        $qb->select('r')
                ->from('Sly\RelationBundle\Entity\Relation', 'r')
                ->where('r.object1Id = :id and r.object2Id= :ida')
                ->orWhere('r.object2Id = :id and r.object1Id = :ida')
                ->andWhere('r.confirmed = 1')
                ->setParameter('id', $id)
                ->setParameter('ida', $ida);
        return  $qb->getQuery()->getResult();
    }
   

    public function getInvitations($id) {
        // Retourne les invitations
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select(array('r'))
           ->addSelect('u.username','u.nom','u.prenom', 'u.path', 'r.object1Id','r.id','r.createdAt')
           ->from('Sly\RelationBundle\Entity\Relation', 'r')
          ->Join('FrontOffice\UserBundle\Entity\User', 'u')
           ->where('r.confirmed = 0 and r.object1Id = u.id and r.object2Id = :id ')                
         
           ->setParameter('id', $id);
        return $qb->getQuery() ->getArrayResult();
    }

    public function getpendingInvitations($idother, $idcurrent) {
        // Retourne les invitations
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('r.name', 'r.object1Id', 'r.object2Id', 'r.confirmed')
                ->from('Sly\RelationBundle\Entity\Relation', 'r')
                ->where('r.confirmed = 0 and r.object1Id = :id and r.object2Id = :idc' )
                ->orWhere('r.confirmed = 0 and r.object2Id = :id and r.object1Id = :idc' )
                ->setParameter('id', $idother)
                ->setParameter('idc', $idcurrent);
        return $qb->getQuery()->getArrayResult();
    }

    public function getUsers($pays,$id) {
      $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('u')
                ->from('FrontOffice\UserBundle\Entity\User', 'u')
                ->where('u.adresse Like :pays' )
                ->andWhere('u.profil = :profil')
                ->andWhere('u.id <> :id')
                ->setParameter('pays', '%'.$pays.'%')
                ->setParameter('id',$id)
                
         ->setParameter('profil', "Entraineur");
            
        return $qb->getQuery()->getArrayResult();
    }
      public function getUsersRegions($reg,$id) {
      $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('u')
                ->from('FrontOffice\UserBundle\Entity\User', 'u')
                ->where('u.adresse Like :reg' )
                ->andWhere('u.profil = :profil')
                ->andWhere('u.id <> :id')
                ->setParameter('reg', '%'.$reg.'%')
                ->setParameter('id',$id)
                
         ->setParameter('profil', "Entraineur");
            
        return $qb->getQuery()->getArrayResult();
    }

    // added by farido tornado; 2 methods retournants l'user courant et son lastTactivity
    public function getCurrentUser($id) {
//     $em = $this->getEntityManager();
//     $currentuser=$em->getRepository('FrontOffice\UserBundle\Entity\User')->find($id);
//     return $currentuser;
    }

    public function getActive() {
        // Comme vous le voyez, le délais est redondant ici, l'idéale serait de le rendre configurable via votre bundle
//        $delay = new \DateTime();
//        $delay->setTimestamp(strtotime('2 minutes ago'));
// 
//        $qb = $this->createQueryBuilder('u')
//            ->where('u.lastActivity > :delay')
//            ->setParameter('delay', $delay)
//        ;
// 
//        return $qb->getQuery()->getResult();
    }

    public function getUsersByName($nomOuPrenom) {
      $qb=$this->getEntityManager()->createQueryBuilder();
      $user=$qb->select('u')
                     ->from("FrontOfficeUserBundle:User", 'u')
                     ->where(" CONCAT(CONCAT(UPPER(u.nom),' '),UPPER(u.prenom)) LIKE :nomPrenom")
                     ->orWhere(" CONCAT(CONCAT(UPPER(u.prenom),' '),UPPER(u.nom)) LIKE :nomPrenom")
                     ->setParameter('nomPrenom', '%'.strtoupper($nomOuPrenom).'%')
                     ->getQuery()->getResult();
     return $user;
    }

    public function getConnectedUsers() {
//        $dateCourante= new \Datetime();
//      $qb=$this->getEntityManager()->createQueryBuilder();
//      $user=$qb->select('u')
//                     ->from("FrontOfficeUserBundle:User", 'u')
//                     
//                     ->having("u.lastLogin < :datecourante")
//                     ->setParameter('datecourante', $dateCourante)
//                     ->getQuery()->getResult();
//     return $user;
    }

    public function getcountInvit($id) {
      
        $em = $this->getEntityManager();
            $query = $em->createQuery("SELECT relation "
                        . "FROM Sly\RelationBundle\Entity\Relation relation"
                        . " where relation.object2Id = :id and relation.confirmed = 0"
                )->setParameter('id', $id);
        return  $query->getResult();
    
        
    }
}
